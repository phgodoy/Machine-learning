//treinamento randômico : Backpropagation
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include<conio.h>
 
int main() {
	float w1[4][4];
	float w2[4][4];
	float I[4][4];
	float O[4][4];
	float I0[4],O0[4],I1[4],O1[4],I2[2],O2[2];
	float E1[4] = {0.0,0.0,1.0,1.0};
	float E2[4] = {0.0,1.0,0.0,1.0};
	float T[4] = {0.0,1.0,1.0,0.0};
	float d1[3],d2,d11,d12;
	float nw1[4][4];
    float vw1[4][4];
    float nw2[4][4];
    float vw2[4][4];
	float erro;
	int ciclo = 0;
	int randon;
	w1[1][1] = (rand()%1000/10.0)-50.0;
	w1[2][1] = (rand()%1000/10.0)-50.0;
	w1[3][1] = (rand()%1000/10.0)-50.0;
	w1[1][2] = (rand()%1000/10.0)-50.0;
	w1[2][2] = (rand()%1000/10.0)-50.0;
	w1[3][2] = (rand()%1000/10.0)-50.0;
	w2[1][1] = (rand()%1000/10.0)-50.0;
	w2[2][1] = (rand()%1000/10.0)-50.0;
	w2[3][1] = (rand()%1000/10.0)-50.0;
	
	for(int m=0;m<=1000;m++){
	erro=0.0;
		for(int n=0;n<=1000;n++){
			randon=rand()%4;
				
			I0[1]=E1[randon];
			I0[2]=E2[randon];
			I0[3]=1.0;
			
			O0[1]=I0[1];
			O0[2]=I0[2];
			O0[3]=I0[3];
			
			I1[1]=O0[1]*w1[1][1]+O0[2]*w1[2][1]+O0[3]*w1[3][1];
			I1[2]=O0[1]*w1[1][2]+O0[2]*w1[2][2]+O0[3]*w1[3][2];
			I1[3]=1.0;
			
			O1[1]=1.0/(1.0+exp(-I1[1]));
			O1[2]=1.0/(1.0+exp(-I1[2]));
			O1[3]=I1[3];
			
			
			
			I2[1]=O1[1]*w2[1][1]+O1[2]*w2[2][1]+O1[3]*w2[3][1];
			O2[1]=1.0/(1.0+exp(-I2[1]));
			//----------backpropagation--------------------------------
			
			d2=(T[randon]-O2[1])*O2[1]*(1.0-O2[1]);
			d1[1]=O1[1]*(1.0-O1[1])*d2*w2[1][1];
			d1[2]=O1[2]*(1.0-O1[2])*d2*w2[2][1];
			
			nw2[1][1]= w2[1][1]+0.5*d2*O1[1]+0.5*vw2[1][1];
			vw2[1][1]=nw2[1][1]-w2[1][1];
			 w2[1][1]=nw2[1][1];
			
			nw2[2][1]= w2[2][1]+0.5*d2*O1[2]+0.5*vw2[2][1];
			vw2[2][1]=nw2[2][1]-w2[2][1];
			 w2[2][1]=nw2[2][1];
			
			nw2[3][1]= w2[3][1]+0.5*d2*O1[3]+0.5*vw2[3][1];
			vw2[3][1]=nw2[3][1]-w2[3][1];
			 w2[3][1]=nw2[3][1];
			//-------------------------------------------------
			nw1[1][1]= w1[1][1]+0.5*d1[1]*O0[1]+0.5*vw1[1][1];
			vw1[1][1]=nw1[1][1]-w1[1][1];
			 w1[1][1]=nw1[1][1];
			
			nw1[2][1]= w1[2][1]+0.5*d1[1]*O0[2]+0.5*vw1[2][1];
			vw1[2][1]=nw1[2][1]-w1[2][1];
			 w1[2][1]=nw1[2][1];
			
			nw1[3][1]= w1[3][1]+0.5*d1[1]*O0[3]+0.5*vw1[3][1];
			vw1[3][1]=nw1[3][1]-w1[3][1];
			 w1[3][1]=nw1[3][1];
			
			//-------------------------------------------------
			
			nw1[1][2]= w1[1][2]+0.5*d1[2]*O0[1]+0.5*vw1[1][2];
			vw1[1][2]=nw1[1][2]-w1[1][2];
			 w1[1][2]=nw1[1][2];
			
			nw1[2][2]= w1[2][2]+0.5*d1[2]*O0[2]+0.5*vw1[2][2];
			vw1[2][2]=nw1[2][2]-w1[2][2];
			 w1[2][2]=nw1[2][2];
			
			nw1[3][2]= w1[3][2]+0.5*d1[2]*O0[3]+0.5*vw1[3][2];
			vw1[3][2]=nw1[3][2]-w1[3][2];
			 w1[3][2]=nw1[3][2];
			
			erro+= (T[randon]-O2[1])*(T[randon]-O2[1]);
		}//n
			erro=erro/1000.0;
			printf("%d %f \n",m,erro);
	}//m
	printf("%f %f %f\n",w1[1][1],w1[2][1],w1[3][1]);
	printf("%f %f %f\n",w1[1][2],w1[2][2],w1[3][2]);
	printf("%f %f %f\n",w2[1][1],w2[2][1],w2[3][1]);
	getch();
	
}//main
